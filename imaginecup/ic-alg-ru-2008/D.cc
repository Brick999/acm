#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <vector>
#include <map>
#include <set>
#include <cassert>
using namespace std;
#define SIZE(x) int((x).size())
#define FOREACH(it, x) for(__typeof((x).begin())it=(x).begin();it!=(x).end();++it)
typedef long long LL;
typedef vector<int> VI;

long long z[10000];

int main()
{
z[0] = 0LL;
z[1] = 2LL;
z[2] = 3LL;
z[3] = 5LL;
z[4] = 6LL;
z[5] = 9LL;
z[6] = 11LL;
z[7] = 15LL;
z[8] = 18LL;
z[9] = 26LL;
z[10] = 33LL;
z[11] = 42LL;
z[12] = 51LL;
z[13] = 63LL;
z[14] = 77LL;
z[15] = 99LL;
z[16] = 121LL;
z[17] = 143LL;
z[18] = 182LL;
z[19] = 231LL;
z[20] = 273LL;
z[21] = 338LL;
z[22] = 429LL;
z[23] = 539LL;
z[24] = 663LL;
z[25] = 819LL;
z[26] = 1001LL;
z[27] = 1274LL;
z[28] = 1573LL;
z[29] = 1859LL;
z[30] = 2366LL;
z[31] = 3003LL;
z[32] = 3549LL;
z[33] = 4394LL;
z[34] = 5577LL;
z[35] = 7007LL;
z[36] = 8619LL;
z[37] = 10647LL;
z[38] = 13013LL;
z[39] = 16562LL;
z[40] = 20449LL;
z[41] = 24167LL;
z[42] = 30758LL;
z[43] = 39039LL;
z[44] = 46137LL;
z[45] = 57122LL;
z[46] = 72501LL;
z[47] = 91091LL;
z[48] = 112047LL;
z[49] = 138411LL;
z[50] = 169169LL;
z[51] = 215306LL;
z[52] = 265837LL;
z[53] = 314171LL;
z[54] = 399854LL;
z[55] = 507507LL;
z[56] = 599781LL;
z[57] = 742586LL;
z[58] = 942513LL;
z[59] = 1184183LL;
z[60] = 1456611LL;
z[61] = 1799343LL;
z[62] = 2199197LL;
z[63] = 2798978LL;
z[64] = 3455881LL;
z[65] = 4084223LL;
z[66] = 5198102LL;
z[67] = 6597591LL;
z[68] = 7797153LL;
z[69] = 9653618LL;
z[70] = 12252669LL;
z[71] = 15394379LL;
z[72] = 18935943LL;
z[73] = 23391459LL;
z[74] = 28589561LL;
z[75] = 36386714LL;
z[76] = 44926453LL;
z[77] = 53094899LL;
z[78] = 67575326LL;
z[79] = 85768683LL;
z[80] = 101362989LL;
z[81] = 125497034LL;
z[82] = 159284697LL;
z[83] = 200126927LL;
z[84] = 246167259LL;
z[85] = 304088967LL;
z[86] = 371664293LL;
z[87] = 473027282LL;
z[88] = 584043889LL;
z[89] = 690233687LL;
z[90] = 878479238LL;
z[91] = 1114992879LL;
z[92] = 1317718857LL;
z[93] = 1631461442LL;
z[94] = 2070701061LL;
z[95] = 2601650051LL;
z[96] = 3200174367LL;
z[97] = 3953156571LL;
z[98] = 4831635809LL;
z[99] = 6149354666LL;
z[100] = 7592570557LL;
z[101] = 8973037931LL;
z[102] = 11420230094LL;
z[103] = 14494907427LL;
z[104] = 17130345141LL;
z[105] = 21208998746LL;
z[106] = 26919113793LL;
z[107] = 33821450663LL;
z[108] = 41602266771LL;
z[109] = 51391035423LL;
z[110] = 62811265517LL;
z[111] = 79941610658LL;
z[112] = 98703417241LL;
z[113] = 116649493103LL;
z[114] = 148462991222LL;
z[115] = 188433796551LL;
z[116] = 222694486833LL;
z[117] = 275716983698LL;
z[118] = 349948479309LL;
z[119] = 439678858619LL;
z[120] = 540829468023LL;
z[121] = 668083460499LL;
z[122] = 816546451721LL;
z[123] = 1039240938554LL;
z[124] = 1283144424133LL;
z[125] = 1516443410339LL;
z[126] = 1930018885886LL;
z[127] = 2449639355163LL;
z[128] = 2895028328829LL;
z[129] = 3584320788074LL;
z[130] = 4549330231017LL;
z[131] = 5715825162047LL;
z[132] = 7030783084299LL;
z[133] = 8685084986487LL;
z[134] = 10615103872373LL;
z[135] = 13510132201202LL;
z[136] = 16680877513729LL;
z[137] = 19713764334407LL;
z[138] = 25090245516518LL;
z[139] = 31845311617119LL;
z[140] = 37635368274777LL;
z[141] = 46596170244962LL;
z[142] = 59141293003221LL;
z[143] = 74305727106611LL;
z[144] = 91400180095887LL;
z[145] = 112906104824331LL;
z[146] = 137996350340849LL;
z[147] = 175631718615626LL;
z[148] = 216851407678477LL;
z[149] = 256278936347291LL;
z[150] = 326173191714734LL;
z[151] = 413989051022547LL;
z[152] = 489259787572101LL;
z[153] = 605750213184506LL;
z[154] = 768836809041873LL;
z[155] = 965974452385943LL;
z[156] = 1188202341246531LL;
z[157] = 1467779362716303LL;
z[158] = 1793952554431037LL;
z[159] = 2283212342003138LL;
z[160] = 2819068299820201LL;
z[161] = 3331626172514783LL;
z[162] = 4240251492291542LL;
z[163] = 5381857663293111LL;
z[164] = 6360377238437313LL;
z[165] = 7874752771398578LL;
z[166] = 9994878517544349LL;
z[167] = 12557667881017259LL;
z[168] = 15446630436204903LL;
z[169] = 19081131715311939LL;
z[170] = 23321383207603481LL;
z[171] = 29681760446040794LL;
z[172] = 36647887897662613LL;
z[173] = 43311140242692179LL;
z[174] = 55123269399790046LL;
z[175] = 69964149622810443LL;
z[176] = 82684904099685069LL;
z[177] = 102371786028181514LL;
z[178] = 129933420728076537LL;
z[179] = 163249682453224367LL;
z[180] = 200806195670663739LL;
z[181] = 248054712299055207LL;
z[182] = 303177981698845253LL;
z[183] = 385862885798530322LL;
z[184] = 476422542669613969LL;
z[185] = 563044823154998327LL;
z[186] = 716602502197270598LL;
z[187] = 909533945096535759LL;
z[188] = 0LL;

	LL N; int K;
	cin >> N;

	if (N <= 1) {
		K = 0;
	} else {
		for (K = 1; K < 187 && N >= z[K+1]; K++);
	}
	printf("%d\n", K);
}


/*
import java.math.*;
import java.io.*;
import java.util.*;

public class Main {
	static BigInteger MAXI = new BigInteger("1000000000000000000");
	static BigInteger HUND = new BigInteger("100");

	static long move(long x, int y) {
		if (x < 1000000000000L) {
			long z = x * (100 + y);
			if (z % 100 != 0) return 0;
			z /= 100;
			if (z > 1000000000000000000L) return 0;
			return z;
		} else {
			BigInteger z = BigInteger.valueOf(x).multiply(BigInteger.valueOf(100 + y));
			if (!z.remainder(HUND).equals(BigInteger.ZERO)) return 0;
			z = z.divide(HUND);
			if (z.compareTo(MAXI) > 0) return 0;
			return z.longValue();
		}
	}

	public static void main(String[] args) {
		long[][] dp = new long[64][64];
		dp[0][0] = 1;

		long[] ans = new long[5000];

		for (int k = 0; k <= 4500; k++) {
			long[][] dp_next = new long[64][64];
			System.out.printf("z[%d] = %sLL;\n", k, ans[k]);
			System.out.flush();
			for (int i = 0; i <= 60; i++) {
				for (int j = 0; j <= 26; j++) {
					if (dp[i][j] == 0) continue;

					long x = dp[i][j] << i;
					for (int t = 0; t < j; t++) x *= 5;

					for (int y = 1; y <= 200; y++) {
						long z = move(x, y);
						if (z == 0) continue;

						if (ans[k+1] == 0 || z < ans[k+1])
							ans[k+1] = z;

						int ii = 0, jj = 0;
						while ((z & 1) == 0) { ii++; z >>>= 1; }
						while ((z % 5) == 0) { jj++; z /= 5; }

						if (dp_next[ii][jj] == 0 || z < dp_next[ii][jj]) {
							dp_next[ii][jj] = z;
						}
					}
				}
			}
			dp = dp_next;
		}



	}
}

*/