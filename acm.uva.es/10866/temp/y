First, it's easy to see that the complement of a magic string is also a magic bitstring.
From this observation, the first bit of the lexicographicaly smallest bitstring must be 0.

Now, consider a particular case n=7. I'll use letters a, b, c... to denote the bits. The matrix looks like:

[code]     1 2 3 4 5 6
  1  a b c d e f
  2  b d f a c e
  3  c f b e a d
  4  d a e b f c
  5  e c a f d b
  6  f e d c b a[/code]
Observe that, since the leftmost column of the matrix is a copy of the bitstring,
and since a=0, the i-th row of the matrix is a complement of the bitstring if
and only if the i-th bit is 1.

This fact gives the following formula for the matrix:
[code]A_{i,j} = s_i XOR s_j
(where A_{i,j} is the element at i-th row, j-th column of the matrix; s_i is the i-th bit; XOR stands for `exclusive or'.)[/code]
It immediately implies A_{i,i} = s_i XOR s_i = 0.

The remaining bits of the bitstring (i.e. those which are not on the main diagonal)
seems to be always 1's, but I don't know how to prove this analytically. I checked by brute force.



A_{i,j} = s_{1 + (ij - 1) % n} = s_i XOR s_j


s_{1 + (ij - 1) % n} = s_i XOR s_j

s_{1 + (ij - 1) % n} = s_i XOR s_j


s_{1 + (ij - 1) % n} = s_i XOR s_j
s_j= 0

s_i = s_{1 + (ij - 1) % n}
s_{i^2} = s_{1 + (i^2 j - 1) % n}
s_{i^2} = s_{1 + (i^2 j - 1) % n}

s_{i^2} = s_{1 + (i^2 j - 1) % n}

s_{1 + (j - 1) % n} = s_j

s_{1 + (ij - 1) % n} = s_i XOR s_j

s_j = 1   j != k^2

s_i = NOT s_{1 + (ij - 1) % n}
s_i = NOT s_{1 + (ij - 1) % n}

   0 0 c 0 e f
   0 0 f 0 c e
   c f 0 e 0 0
   0 0 e 0 f c
   e c 0 f 0 0
   f e 0 c 0 0

   0 0 c 0 e f
   0 0 f 0 c e
   c f 0 e 0 0
   0 0 e 0 f c
   e c 0 f 0 0
   f e 0 c 0 0
