#include <algorithm>
#include <vector>
#include <sstream>
#include <set>
#include <cctype>
using namespace std;

struct Tile {
	char s[64][64];
	Tile() { memset(s, '-', sizeof(s)); }

	void rot90() {
		char next[64][64];
		memset(next, '-', sizeof(next));
		for (int i = 0; i < 64; i++)
		for (int j = 0; j < 64; j++)
			next[j][63-i] = s[i][j];
		memcpy(s, next, sizeof(next));
	}

	void trans_can() {
		int mrow = 64, mcol = 64, cnt = 0;
		for (int i = 0; i < 64; i++)
		for (int j = 0; j < 64; j++) {
			if (s[i][j] == '-') continue;
			mrow <?= i;
			mcol <?= j;
			cnt++;
		}
		if (cnt == 0) return;

		char next[64][64];
		memset(next, '-', sizeof(next));
		for (int i = mrow; i < 64; i++)
		for (int j = mcol; j < 64; j++)
			next[i-mrow][j-mcol] = s[i][j];

		memcpy(s, next, sizeof(next));
	}

	void rot_can() {
		char best[64][64];
		trans_can();
		memcpy(best, s, sizeof(s));
		for (int i = 0; i < 4; i++) {
			rot90();
			trans_can();
			if (memcmp(s, best, sizeof(s)) < 0)
				memcpy(best, s, sizeof(s));
		}
		memcpy(s, best, sizeof(s));
	}

	bool operator <(const Tile &b) const { return memcmp(s, b.s, sizeof(s)) < 0; }
};

void dfs(vector<string> &lay, Tile &out, int i, int j) {
	if (i < 0 || j < 0 || i >= lay.size() || j >= lay[0].size()) return;
	if (lay[i][j] == '-') return;
	out.s[i][j] = lay[i][j];
	lay[i][j] = '-';
	dfs(lay, out, i-1, j);
	dfs(lay, out, i+1, j);
	dfs(lay, out, i, j-1);
	dfs(lay, out, i, j+1);
}

struct Distinct {
	int count(vector<string> layout) {
		set<Tile> S;

		for (int i = 0; i < (int)layout.size(); i++)
		for (int j = 0; j < (int)layout[0].size(); j++) {
			if (layout[i][j] == '-') continue;

			Tile T;
			dfs(layout, T, i, j);

			T.rot_can();

			S.insert(T);
		}

		return S.size();
	}
};
