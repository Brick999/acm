<html><head>

<script language="javascript">
<!--
    var endtime;
    
    function initcount(secondsleft) {
        var now = new Date();
        return now.getTime() + secondsleft*1000;
    }
    function count1(i) { i = i - i%1; return i; } 
    function count2(i) { i = i - i%1; if (i < 10) return "0"+i; return i; }
    function updateclock(head, word, endtime) {
        var now = new Date();
        var delta = (endtime - now.getTime())/1000;
        var s, x;
        if(delta < 1)
            s = head + " has ended";
        else{
            s = head + " ends: ";
            s = head + ": ";
            if(delta >= 24*3600)
                s = s + count1(delta/86400) + "d ";
            if(delta >= 3600)
                s = s + count2((delta/3600)%24) + "h ";
            if(delta >= 60)
                s = s + count2((delta/60)%60) + "m ";
            s = s + count2(delta%60) + "s";
            setTimeout("updateclock('"+head+"','"+word+"',"+endtime+")", 500);
        }

        var slot = document.getElementById(word);
        slot.innerHTML = s;
    }
-->
</script>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>USACO Problems</title></head><body onload="endtime = initcount(52609); updateclock('U S OPEN,  2006', 'Contest', endtime); endtime = initcount(14400); updateclock('Your Contest Session', 'Person', endtime);" background="gold-ru_files/bg9gold.jpg">

<table><tbody><tr>
<td><img src="gold-ru_files/cowhead2.gif" height="81" width="65">
</td>
<td valign="top">
<table cellpadding="0" cellspacing="0">
    <tbody><tr><td>OPEN06 <b>GOLD</b> Division</td></tr>
    <tr><td><div id="Contest">U S OPEN,  2006: 14h 36m 28s</div></td></tr>
    <tr><td><div id="Person">Your Contest Session: 03h 59m 39s</div></td></tr>
    <tr><td></td></tr>
</tbody></table>
</td><td></td></tr>
</tbody></table>


<pre></pre>
<pre>**********************************************************************
                           GOLD PROBLEMS
**********************************************************************
                  Три задачи с номерами от 1 до 3
**********************************************************************

Problem 1: The County Fair [Brian Dean, 2006]

     Каждый год фермер Джон любит посещать окружную ярмарку. На ярмарке 
N будок (1 &lt;= N &lt;= 400), и в каждой будке с номером i планируется 
раздавать призы в конкретное время P(i) (0 &lt;= P(i) &lt;= 1,000,000,000)  
в течение дня. Фермер Джон узнал про это и хочет собрать как можно больше 
призов для своих коров. Он хочет посетить как можно больше будок 
точно в то время, когда будут раздаваться призы.
      ФД исследовал и определил время T(i,j) (всегда в диапазоне
1..1,000,000) которое занимает у него перейти от будки с номером i
к будке с номером j. Окружная ярмарка спланирована необычным образом, 
так что возможно, что добраться от будки i к будке j , быстрее, если
посетить некоторые другие будки по пути. Не умея обращаться с картами,
ФД никогда не рассматривает такие маршруты - он идет от будки i 
непосредственно к будке j, не посещая промежуточные будки по пути.   
Более того, T(i,j) может быть не равно T(j,i) - потому что с горы
идти проще чем в гору.
      ФД начинает с будки 1 в момент времени 0. Помогите ему собрать
как можно больше призов.

PROBLEM NAME: cfair

INPUT FORMAT:

* Строка 1: Одно целое число N.

* Строки 2..1+N: Строка i+1 содержит одно целое число - P(i).

* Строки 2+N..1+N+N^2: Каждая их этих N^2  строк содержит одно целое
         число T(i,j) для каждой пары будок (i,j). Первые N строк  
         содержать соответственно T(1,1), T(1,2), ..., T(1,N).
         Следующие N строк содержат T(2,1), T(2,2), ..., T(2,N) и т.д.
         Каждое из чисел T(i,j) находится в диапазоне 1...1,000,000,
         за исключением диагональных элементов T(1,1), T(2,2), ..., 
         T(N,N), которые равны 0.

SAMPLE INPUT (file cfair.in):

4
13
9
19
3
0
10
20
3
4
0
11
2
1
15
0
12
5
5
13
0

INPUT DETAILS:

Всего 4 будки. Будка номер 1 выдает приз в момент времени 13, будка
номер 2 выдает приз в момент времени 9, будка номер 3 - в момент времени
19, в будка номер 4 - в момент времени 3.

OUTPUT FORMAT:

* Строка 1: Одно целое число, содержащее максимальное количество
            призов, которые может получить фермер Джон.


SAMPLE OUTPUT (file cfair.out):

3

OUTPUT DETAILS:

    ФД идет к будке 4 и прибывает туда в момент 3, как раз получая 
приз. Затем он идет непосредственно к будке 2, прибывает туда в 
момент 8, ждет 1 времени и получает здесь приз. Наконец, он идет 
обратно к будке 1, прибывает туда в момент времени 13 и забирает 
свой последний третий приз.


**********************************************************************

Problem 2: The Milk Queue [Brian Dean, 2006]

   Каждое утро N (1 &lt;= N &lt;= 25,000) коров фермера Джона выстраиваются
на дойку. Стремясь упростить этот процесс, ФД спроектировал двух-стадийный
процесс доения, когда поток коров проходит последовательно через два 
амбара, в каждом из которых последовательно происходит доение. ФД
доит коров одну за другой в первом амбаре, а его лучший друг фермер 
Боб доит коров (в том же порядке), когда они особождаются в первом 
амбаре и переходят во второй.
   К сожалению, то что коровы ходят в том же порядке, приводит к 
некоторой неэффективности. Например, если ФД долго доит некоторую 
корову, то ФБ может в это время быть без работы. С другой стороны,
если ФД работает слишком быстро, то ко второму амбару может выстроиться 
очередь. 
   Пожалуйста, помогите фермеру Джону определить наилучший возможный
порядок дойки коров, так чтобы процесс доения последней коровы окончился 
как можно раньше. Для каждой коровы известно время A(i), требуемое 
для дойки в первом амбаре и B(i) - время, требуемое для дойки во втором 
амбаре. Оба числа A(i) и B(i)  в диапазоне 1...20,000.

PROBLEM NAME: mqueue

INPUT FORMAT:

* Строка 1: Одно целое число, N.

* Строки 2..1+N: Строка i+1 содержит два разделенных пробелом целых 
            числа A(i) и B(i) для коровы i.

SAMPLE INPUT (file mqueue.in):

3
2 2
7 4
3 5

INPUT DETAILS:

    Всего три коровы. Корова #1 доится по 2 единицы времени в каждом 
амбаре, корова #2 доится 7 единиц времени в первом амбаре и 4 - во 
втором, а корова #3 доится 3 единицы времени в первом амбаре и 5
единиц времени во втором.
 
OUTPUT FORMAT:

* Строка 1: Минимально-возможное время подоить всех коров,
            если мы упорядочим их оптимально.

SAMPLE OUTPUT (file mqueue.out):

16

OUTPUT DETAILS:

     Расставив коров в порядке 3, 1, 2, мы сможем закончить процесс
доения за 16 единиц времени.
 
**********************************************************************

Problem 3: Two-Headed Cows [Brian Dean, 2006]

    Фермер Джон хотел получить более умных коров - и он добился своего
- он вывел специальный вид коров - с двумя головами - одной спереди и 
другой - сзади. Каждая такая корова получилась симметричной.

(__)     (__)
(oo)     (oo)
 \/-------\/ 
  ||     ||  
  ||-----||  
  ~~     ~~  

    К сожалению возникла довольно трудная проблема: эти две головы
каждой коровы (пометим их A и B) являются отдельными личностями.
Например, Голова A коровы 1 может дружить с головой A коровы 2, 
но может не дружить с головой B коровы 2.
    Каждое утро N (1 &lt;= N &lt;= 25,000) коров ФД (привычно пронумерованные 
от 1 до N) выстраиваются на прием пищи (корова 1 - первой, корова N
- последней). Поскольку коровы двухголовые, то ФД использует двухместные
кормушки. Одно множество коровьих голов питается  в одной кормушке, 
другое - в другой. Поскольку коровы чуствуют себя счастливей, когда
они кушают с друзьями, ФД хочет сориентировать каждую корову таким 
образом, чтобы никакая пара недружественных голов не питалась 
одновременно. Говоря другими словами - если есть две "недружащие головы",
то они должны быть сориентированы в разные стороны.
    Заданы M (1 &lt;= M &lt;= 50,000) пар голов, которые не дружат,
помогите ФД организовать своих коров нужным образом. Это может быть
и невозможно сделать во время одной кормежной сессии, поэтому ФД
хочет использовать минмальное количество сессий кормежки.
    Каждая сессия должна включать непрерывное множество коров.
Например, первая кормежная сессия может включать коров 1..10,
вторая сессия - коров 11..14 , третья - коров 15-23. Внутри каждой 
сессии коровы должны быть сориентированы таким образом, что только
дружащие головы могут кушать одновременно.
    Определите минимальное количество требуемых сессий кормежки.

PROBLEM NAME: twohead

INPUT FORMAT:

* Строка 1: Два разделенных пробелом целых числа N и M.

* Строки 2..M+1: Каждая строка описывает пару недружащих голов
                 например строка "4 A 37 B" означает, что голова A
                 коровы 4 не дружит с головой B коровы 37.

SAMPLE INPUT (file twohead.in):

4 5
3 B 1 B
4 A 3 A
2 B 1 B
4 B 2 A
3 A 2 B

INPUT DETAILS:

Всего 4 коровы. Голова B коровы 3 не дружит с головой B коровы 1 и т.д. 

OUTPUT FORMAT:

* Строка 1: Одно целое число, означающее минимальное количество
            сессий кормления

SAMPLE OUTPUT (file twohead.out):

2

OUTPUT DETAILS:

Коровы #1...#3 могут питаться все вместе, но корова 4 должна быть 
вынесена в отдельную сессию. 

**********************************************************************

Translation by Michael Dolinsky
</pre><hr>
<form action="/ioiupload2" enctype="multipart/form-data" method="post">
<input name="a" value="B1nQZ6ekbFN" type="hidden">


<table bgcolor="#000000" border="0" cellpadding="0" cellspacing="0">
<tbody><tr><td height="1"></td><td>

</td></tr><tr><td width="1"></td><td>

<table bgcolor="#bfffbf" cellpadding="5">
<tbody><tr><td>Use this form to submit a program for grading:</td>
<td rowspan="3"><input value="Submit" name="submit" type="submit"></td>
</tr><tr><td width="60%"><b>Program File:</b><input name="filename" type="file"></td>
    </tr>
</tbody></table>
</td><td width="1"></td>

</tr><tr height="1"><td></td></tr>
</tbody></table>
<hr>
Nothing is currently saved for grading.
<hr>
<center>
<a href="http://ace.delos.com/ioiedit?a=B1nQZ6ekbFN">Edit your database record</a>
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload2?a=B1nQZ6ekbFN&amp;logout=1"> Logout </a>
<!--<a href="https://ace.delos.com/rules.html" target="_blank"> Rules </a>-->
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload2?init=1&amp;a=B1nQZ6ekbFN">Main contest index</a>
</center>
<!--&nbsp;|&nbsp;-->
<center>
<a href="http://ace.delos.com/ioiupload2?a=B1nQZ6ekbFN&amp;showsubmit">See submitted solutions</a>
&nbsp;|&nbsp;
<a href="http://ace.delos.com/ioiupload2?a=B1nQZ6ekbFN&amp;suggestionbox">Send message
to contest director</a><br>
Director has been away from his keyboard for 9 minutes<br>
This page was generated at 22:23:11 GMT.
</center>
</form></body></html>